\BOOKMARK [2][]{Outline0.1}{Resources}{}% 1
\BOOKMARK [2][]{Outline0.2}{Running the textbook examples}{}% 2
\BOOKMARK [2][]{Outline0.3}{Simple Scheme Program}{}% 3
\BOOKMARK [2][]{Outline0.4}{Simple Scheme Program Unit Tests}{}% 4
\BOOKMARK [2][]{Outline0.5}{There are two types of expressions:}{}% 5
\BOOKMARK [2][]{Outline0.6}{Introducing Local Variables}{}% 6
\BOOKMARK [2][]{Outline0.7}{Beware! This will NOT work.}{}% 7
\BOOKMARK [2][]{Outline0.8}{But this will.}{}% 8
\BOOKMARK [2][]{Outline0.9}{Defining Procedures}{}% 9
\BOOKMARK [2][]{Outline0.10}{Defining Procedures}{}% 10
\BOOKMARK [2][]{Outline0.11}{Defining Procedures}{}% 11
\BOOKMARK [2][]{Outline0.12}{Procedures always return a value}{}% 12
\BOOKMARK [2][]{Outline0.13}{Solving problems}{}% 13
\BOOKMARK [2][]{Outline0.14}{Newton's Method in Scheme}{}% 14
\BOOKMARK [2][]{Outline0.15}{Newton's Method in Scheme}{}% 15
\BOOKMARK [2][]{Outline0.16}{Definitions can be nested}{}% 16
\BOOKMARK [2][]{Outline0.17}{Parameters need not be repeated}{}% 17
\BOOKMARK [2][]{Outline0.18}{Introducing local functions with letrec }{}% 18
\BOOKMARK [2][]{Outline0.19}{Procedures in Scheme}{}% 19
\BOOKMARK [2][]{Outline0.20}{Local Variables in Procedures: Closures}{}% 20
\BOOKMARK [2][]{Outline0.21}{A Procedure that Returns a Procedure}{}% 21
\BOOKMARK [2][]{Outline0.22}{A Procedure that Returns a Counter}{}% 22
\BOOKMARK [2][]{Outline0.23}{Procedures as Returned Values: Derivatives}{}% 23
\BOOKMARK [2][]{Outline0.24}{Procedures as Returned Values: Procedures as Data}{}% 24
\BOOKMARK [2][]{Outline0.25}{Procedures as parameters}{}% 25
\BOOKMARK [2][]{Outline0.26}{Better notation for summations}{}% 26
\BOOKMARK [2][]{Outline0.27}{Matches Scheme Code Better, Too}{}% 27
\BOOKMARK [2][]{Outline0.28}{Finding fixed points}{}% 28
\BOOKMARK [2][]{Outline0.29}{Fixed points in scheme:}{}% 29
\BOOKMARK [2][]{Outline0.30}{Remember Newton's Method?}{}% 30
\BOOKMARK [2][]{Outline0.31}{Newton's Method Using Functional Programming}{}% 31
